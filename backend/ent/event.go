// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EventId holds the value of the "eventId" field.
	EventId int `json:"eventId,omitempty"`
	// BrandAddress holds the value of the "brandAddress" field.
	BrandAddress string `json:"brandAddress,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges        EventEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// EventID holds the value of the event_id edge.
	EventID []*EventParticipant `json:"event_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventIDOrErr returns the EventID value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) EventIDOrErr() ([]*EventParticipant, error) {
	if e.loadedTypes[0] {
		return e.EventID, nil
	}
	return nil, &NotLoadedError{edge: "event_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldID, event.FieldEventId:
			values[i] = new(sql.NullInt64)
		case event.FieldBrandAddress:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (_m *Event) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case event.FieldEventId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field eventId", values[i])
			} else if value.Valid {
				_m.EventId = int(value.Int64)
			}
		case event.FieldBrandAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brandAddress", values[i])
			} else if value.Valid {
				_m.BrandAddress = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Event.
// This includes values selected through modifiers, order, etc.
func (_m *Event) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEventID queries the "event_id" edge of the Event entity.
func (_m *Event) QueryEventID() *EventParticipantQuery {
	return NewEventClient(_m.config).QueryEventID(_m)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Event) Update() *EventUpdateOne {
	return NewEventClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Event) Unwrap() *Event {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("eventId=")
	builder.WriteString(fmt.Sprintf("%v", _m.EventId))
	builder.WriteString(", ")
	builder.WriteString("brandAddress=")
	builder.WriteString(_m.BrandAddress)
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event
