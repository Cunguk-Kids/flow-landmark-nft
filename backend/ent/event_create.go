// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/eventparticipant"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
}

// SetEventId sets the "eventId" field.
func (_c *EventCreate) SetEventId(v int) *EventCreate {
	_c.mutation.SetEventId(v)
	return _c
}

// SetBrandAddress sets the "brandAddress" field.
func (_c *EventCreate) SetBrandAddress(v string) *EventCreate {
	_c.mutation.SetBrandAddress(v)
	return _c
}

// SetNillableBrandAddress sets the "brandAddress" field if the given value is not nil.
func (_c *EventCreate) SetNillableBrandAddress(v *string) *EventCreate {
	if v != nil {
		_c.SetBrandAddress(*v)
	}
	return _c
}

// SetEventName sets the "eventName" field.
func (_c *EventCreate) SetEventName(v string) *EventCreate {
	_c.mutation.SetEventName(v)
	return _c
}

// SetQuota sets the "quota" field.
func (_c *EventCreate) SetQuota(v int) *EventCreate {
	_c.mutation.SetQuota(v)
	return _c
}

// SetCounter sets the "counter" field.
func (_c *EventCreate) SetCounter(v int) *EventCreate {
	_c.mutation.SetCounter(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *EventCreate) SetDescription(v string) *EventCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetImage sets the "image" field.
func (_c *EventCreate) SetImage(v string) *EventCreate {
	_c.mutation.SetImage(v)
	return _c
}

// SetLat sets the "lat" field.
func (_c *EventCreate) SetLat(v float64) *EventCreate {
	_c.mutation.SetLat(v)
	return _c
}

// SetLong sets the "long" field.
func (_c *EventCreate) SetLong(v float64) *EventCreate {
	_c.mutation.SetLong(v)
	return _c
}

// SetRadius sets the "radius" field.
func (_c *EventCreate) SetRadius(v float64) *EventCreate {
	_c.mutation.SetRadius(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *EventCreate) SetStatus(v int) *EventCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetStartDate sets the "startDate" field.
func (_c *EventCreate) SetStartDate(v float64) *EventCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetEndDate sets the "endDate" field.
func (_c *EventCreate) SetEndDate(v float64) *EventCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetTotalRareNFT sets the "totalRareNFT" field.
func (_c *EventCreate) SetTotalRareNFT(v int) *EventCreate {
	_c.mutation.SetTotalRareNFT(v)
	return _c
}

// AddEventIDIDs adds the "event_id" edge to the EventParticipant entity by IDs.
func (_c *EventCreate) AddEventIDIDs(ids ...int) *EventCreate {
	_c.mutation.AddEventIDIDs(ids...)
	return _c
}

// AddEventID adds the "event_id" edges to the EventParticipant entity.
func (_c *EventCreate) AddEventID(v ...*EventParticipant) *EventCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (_c *EventCreate) Mutation() *EventMutation {
	return _c.mutation
}

// Save creates the Event in the database.
func (_c *EventCreate) Save(ctx context.Context) (*Event, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EventCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EventCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *EventCreate) defaults() {
	if _, ok := _c.mutation.BrandAddress(); !ok {
		v := event.DefaultBrandAddress
		_c.mutation.SetBrandAddress(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *EventCreate) check() error {
	if _, ok := _c.mutation.EventId(); !ok {
		return &ValidationError{Name: "eventId", err: errors.New(`ent: missing required field "Event.eventId"`)}
	}
	if _, ok := _c.mutation.BrandAddress(); !ok {
		return &ValidationError{Name: "brandAddress", err: errors.New(`ent: missing required field "Event.brandAddress"`)}
	}
	if _, ok := _c.mutation.EventName(); !ok {
		return &ValidationError{Name: "eventName", err: errors.New(`ent: missing required field "Event.eventName"`)}
	}
	if _, ok := _c.mutation.Quota(); !ok {
		return &ValidationError{Name: "quota", err: errors.New(`ent: missing required field "Event.quota"`)}
	}
	if _, ok := _c.mutation.Counter(); !ok {
		return &ValidationError{Name: "counter", err: errors.New(`ent: missing required field "Event.counter"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Event.description"`)}
	}
	if _, ok := _c.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Event.image"`)}
	}
	if _, ok := _c.mutation.Lat(); !ok {
		return &ValidationError{Name: "lat", err: errors.New(`ent: missing required field "Event.lat"`)}
	}
	if _, ok := _c.mutation.Long(); !ok {
		return &ValidationError{Name: "long", err: errors.New(`ent: missing required field "Event.long"`)}
	}
	if _, ok := _c.mutation.Radius(); !ok {
		return &ValidationError{Name: "radius", err: errors.New(`ent: missing required field "Event.radius"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Event.status"`)}
	}
	if _, ok := _c.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`ent: missing required field "Event.startDate"`)}
	}
	if _, ok := _c.mutation.EndDate(); !ok {
		return &ValidationError{Name: "endDate", err: errors.New(`ent: missing required field "Event.endDate"`)}
	}
	if _, ok := _c.mutation.TotalRareNFT(); !ok {
		return &ValidationError{Name: "totalRareNFT", err: errors.New(`ent: missing required field "Event.totalRareNFT"`)}
	}
	return nil
}

func (_c *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.EventId(); ok {
		_spec.SetField(event.FieldEventId, field.TypeInt, value)
		_node.EventId = value
	}
	if value, ok := _c.mutation.BrandAddress(); ok {
		_spec.SetField(event.FieldBrandAddress, field.TypeString, value)
		_node.BrandAddress = value
	}
	if value, ok := _c.mutation.EventName(); ok {
		_spec.SetField(event.FieldEventName, field.TypeString, value)
		_node.EventName = value
	}
	if value, ok := _c.mutation.Quota(); ok {
		_spec.SetField(event.FieldQuota, field.TypeInt, value)
		_node.Quota = value
	}
	if value, ok := _c.mutation.Counter(); ok {
		_spec.SetField(event.FieldCounter, field.TypeInt, value)
		_node.Counter = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Image(); ok {
		_spec.SetField(event.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := _c.mutation.Lat(); ok {
		_spec.SetField(event.FieldLat, field.TypeFloat64, value)
		_node.Lat = value
	}
	if value, ok := _c.mutation.Long(); ok {
		_spec.SetField(event.FieldLong, field.TypeFloat64, value)
		_node.Long = value
	}
	if value, ok := _c.mutation.Radius(); ok {
		_spec.SetField(event.FieldRadius, field.TypeFloat64, value)
		_node.Radius = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(event.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeFloat64, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeFloat64, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.TotalRareNFT(); ok {
		_spec.SetField(event.FieldTotalRareNFT, field.TypeInt, value)
		_node.TotalRareNFT = value
	}
	if nodes := _c.mutation.EventIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventIDTable,
			Columns: []string{event.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
}

// Save creates the Event entities in the database.
func (_c *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Event, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EventCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
