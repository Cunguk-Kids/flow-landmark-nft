// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/nft"
	"backend/ent/predicate"
	"backend/ent/schema"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NftUpdate is the builder for updating Nft entities.
type NftUpdate struct {
	config
	hooks    []Hook
	mutation *NftMutation
}

// Where appends a list predicates to the NftUpdate builder.
func (_u *NftUpdate) Where(ps ...predicate.Nft) *NftUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetNftID sets the "nft_id" field.
func (_u *NftUpdate) SetNftID(v int64) *NftUpdate {
	_u.mutation.ResetNftID()
	_u.mutation.SetNftID(v)
	return _u
}

// SetNillableNftID sets the "nft_id" field if the given value is not nil.
func (_u *NftUpdate) SetNillableNftID(v *int64) *NftUpdate {
	if v != nil {
		_u.SetNftID(*v)
	}
	return _u
}

// AddNftID adds value to the "nft_id" field.
func (_u *NftUpdate) AddNftID(v int64) *NftUpdate {
	_u.mutation.AddNftID(v)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *NftUpdate) SetMetadata(v schema.Metadata) *NftUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *NftUpdate) SetNillableMetadata(v *schema.Metadata) *NftUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// SetOwnerAddress sets the "owner_address" field.
func (_u *NftUpdate) SetOwnerAddress(v string) *NftUpdate {
	_u.mutation.SetOwnerAddress(v)
	return _u
}

// SetNillableOwnerAddress sets the "owner_address" field if the given value is not nil.
func (_u *NftUpdate) SetNillableOwnerAddress(v *string) *NftUpdate {
	if v != nil {
		_u.SetOwnerAddress(*v)
	}
	return _u
}

// SetMintTime sets the "mint_time" field.
func (_u *NftUpdate) SetMintTime(v time.Time) *NftUpdate {
	_u.mutation.SetMintTime(v)
	return _u
}

// SetNillableMintTime sets the "mint_time" field if the given value is not nil.
func (_u *NftUpdate) SetNillableMintTime(v *time.Time) *NftUpdate {
	if v != nil {
		_u.SetMintTime(*v)
	}
	return _u
}

// SetRarity sets the "rarity" field.
func (_u *NftUpdate) SetRarity(v string) *NftUpdate {
	_u.mutation.SetRarity(v)
	return _u
}

// SetNillableRarity sets the "rarity" field if the given value is not nil.
func (_u *NftUpdate) SetNillableRarity(v *string) *NftUpdate {
	if v != nil {
		_u.SetRarity(*v)
	}
	return _u
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_u *NftUpdate) SetEventID(id int) *NftUpdate {
	_u.mutation.SetEventID(id)
	return _u
}

// SetEvent sets the "event" edge to the Event entity.
func (_u *NftUpdate) SetEvent(v *Event) *NftUpdate {
	return _u.SetEventID(v.ID)
}

// Mutation returns the NftMutation object of the builder.
func (_u *NftUpdate) Mutation() *NftMutation {
	return _u.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (_u *NftUpdate) ClearEvent() *NftUpdate {
	_u.mutation.ClearEvent()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NftUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NftUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NftUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NftUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NftUpdate) check() error {
	if _u.mutation.EventCleared() && len(_u.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Nft.event"`)
	}
	return nil
}

func (_u *NftUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nft.Table, nft.Columns, sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.NftID(); ok {
		_spec.SetField(nft.FieldNftID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNftID(); ok {
		_spec.AddField(nft.FieldNftID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(nft.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.OwnerAddress(); ok {
		_spec.SetField(nft.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.MintTime(); ok {
		_spec.SetField(nft.FieldMintTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Rarity(); ok {
		_spec.SetField(nft.FieldRarity, field.TypeString, value)
	}
	if _u.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.EventTable,
			Columns: []string{nft.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.EventTable,
			Columns: []string{nft.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NftUpdateOne is the builder for updating a single Nft entity.
type NftUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NftMutation
}

// SetNftID sets the "nft_id" field.
func (_u *NftUpdateOne) SetNftID(v int64) *NftUpdateOne {
	_u.mutation.ResetNftID()
	_u.mutation.SetNftID(v)
	return _u
}

// SetNillableNftID sets the "nft_id" field if the given value is not nil.
func (_u *NftUpdateOne) SetNillableNftID(v *int64) *NftUpdateOne {
	if v != nil {
		_u.SetNftID(*v)
	}
	return _u
}

// AddNftID adds value to the "nft_id" field.
func (_u *NftUpdateOne) AddNftID(v int64) *NftUpdateOne {
	_u.mutation.AddNftID(v)
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *NftUpdateOne) SetMetadata(v schema.Metadata) *NftUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *NftUpdateOne) SetNillableMetadata(v *schema.Metadata) *NftUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// SetOwnerAddress sets the "owner_address" field.
func (_u *NftUpdateOne) SetOwnerAddress(v string) *NftUpdateOne {
	_u.mutation.SetOwnerAddress(v)
	return _u
}

// SetNillableOwnerAddress sets the "owner_address" field if the given value is not nil.
func (_u *NftUpdateOne) SetNillableOwnerAddress(v *string) *NftUpdateOne {
	if v != nil {
		_u.SetOwnerAddress(*v)
	}
	return _u
}

// SetMintTime sets the "mint_time" field.
func (_u *NftUpdateOne) SetMintTime(v time.Time) *NftUpdateOne {
	_u.mutation.SetMintTime(v)
	return _u
}

// SetNillableMintTime sets the "mint_time" field if the given value is not nil.
func (_u *NftUpdateOne) SetNillableMintTime(v *time.Time) *NftUpdateOne {
	if v != nil {
		_u.SetMintTime(*v)
	}
	return _u
}

// SetRarity sets the "rarity" field.
func (_u *NftUpdateOne) SetRarity(v string) *NftUpdateOne {
	_u.mutation.SetRarity(v)
	return _u
}

// SetNillableRarity sets the "rarity" field if the given value is not nil.
func (_u *NftUpdateOne) SetNillableRarity(v *string) *NftUpdateOne {
	if v != nil {
		_u.SetRarity(*v)
	}
	return _u
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_u *NftUpdateOne) SetEventID(id int) *NftUpdateOne {
	_u.mutation.SetEventID(id)
	return _u
}

// SetEvent sets the "event" edge to the Event entity.
func (_u *NftUpdateOne) SetEvent(v *Event) *NftUpdateOne {
	return _u.SetEventID(v.ID)
}

// Mutation returns the NftMutation object of the builder.
func (_u *NftUpdateOne) Mutation() *NftMutation {
	return _u.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (_u *NftUpdateOne) ClearEvent() *NftUpdateOne {
	_u.mutation.ClearEvent()
	return _u
}

// Where appends a list predicates to the NftUpdate builder.
func (_u *NftUpdateOne) Where(ps ...predicate.Nft) *NftUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NftUpdateOne) Select(field string, fields ...string) *NftUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Nft entity.
func (_u *NftUpdateOne) Save(ctx context.Context) (*Nft, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NftUpdateOne) SaveX(ctx context.Context) *Nft {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NftUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NftUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NftUpdateOne) check() error {
	if _u.mutation.EventCleared() && len(_u.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Nft.event"`)
	}
	return nil
}

func (_u *NftUpdateOne) sqlSave(ctx context.Context) (_node *Nft, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(nft.Table, nft.Columns, sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Nft.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nft.FieldID)
		for _, f := range fields {
			if !nft.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nft.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.NftID(); ok {
		_spec.SetField(nft.FieldNftID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedNftID(); ok {
		_spec.AddField(nft.FieldNftID, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(nft.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.OwnerAddress(); ok {
		_spec.SetField(nft.FieldOwnerAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.MintTime(); ok {
		_spec.SetField(nft.FieldMintTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Rarity(); ok {
		_spec.SetField(nft.FieldRarity, field.TypeString, value)
	}
	if _u.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.EventTable,
			Columns: []string{nft.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.EventTable,
			Columns: []string{nft.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Nft{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nft.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
