// Code generated by ent, DO NOT EDIT.

package eventparticipant

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldLTE(FieldID, id))
}

// UserAddress applies equality check predicate on the "userAddress" field. It's identical to UserAddressEQ.
func UserAddress(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldEQ(FieldUserAddress, v))
}

// IsCheckedIn applies equality check predicate on the "isCheckedIn" field. It's identical to IsCheckedInEQ.
func IsCheckedIn(v bool) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldEQ(FieldIsCheckedIn, v))
}

// UserAddressEQ applies the EQ predicate on the "userAddress" field.
func UserAddressEQ(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldEQ(FieldUserAddress, v))
}

// UserAddressNEQ applies the NEQ predicate on the "userAddress" field.
func UserAddressNEQ(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldNEQ(FieldUserAddress, v))
}

// UserAddressIn applies the In predicate on the "userAddress" field.
func UserAddressIn(vs ...string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldIn(FieldUserAddress, vs...))
}

// UserAddressNotIn applies the NotIn predicate on the "userAddress" field.
func UserAddressNotIn(vs ...string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldNotIn(FieldUserAddress, vs...))
}

// UserAddressGT applies the GT predicate on the "userAddress" field.
func UserAddressGT(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldGT(FieldUserAddress, v))
}

// UserAddressGTE applies the GTE predicate on the "userAddress" field.
func UserAddressGTE(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldGTE(FieldUserAddress, v))
}

// UserAddressLT applies the LT predicate on the "userAddress" field.
func UserAddressLT(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldLT(FieldUserAddress, v))
}

// UserAddressLTE applies the LTE predicate on the "userAddress" field.
func UserAddressLTE(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldLTE(FieldUserAddress, v))
}

// UserAddressContains applies the Contains predicate on the "userAddress" field.
func UserAddressContains(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldContains(FieldUserAddress, v))
}

// UserAddressHasPrefix applies the HasPrefix predicate on the "userAddress" field.
func UserAddressHasPrefix(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldHasPrefix(FieldUserAddress, v))
}

// UserAddressHasSuffix applies the HasSuffix predicate on the "userAddress" field.
func UserAddressHasSuffix(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldHasSuffix(FieldUserAddress, v))
}

// UserAddressEqualFold applies the EqualFold predicate on the "userAddress" field.
func UserAddressEqualFold(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldEqualFold(FieldUserAddress, v))
}

// UserAddressContainsFold applies the ContainsFold predicate on the "userAddress" field.
func UserAddressContainsFold(v string) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldContainsFold(FieldUserAddress, v))
}

// IsCheckedInEQ applies the EQ predicate on the "isCheckedIn" field.
func IsCheckedInEQ(v bool) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldEQ(FieldIsCheckedIn, v))
}

// IsCheckedInNEQ applies the NEQ predicate on the "isCheckedIn" field.
func IsCheckedInNEQ(v bool) predicate.EventParticipant {
	return predicate.EventParticipant(sql.FieldNEQ(FieldIsCheckedIn, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.EventParticipant {
	return predicate.EventParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.EventParticipant {
	return predicate.EventParticipant(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EventParticipant) predicate.EventParticipant {
	return predicate.EventParticipant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EventParticipant) predicate.EventParticipant {
	return predicate.EventParticipant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EventParticipant) predicate.EventParticipant {
	return predicate.EventParticipant(sql.NotPredicates(p))
}
