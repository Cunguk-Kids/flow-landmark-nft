// Code generated by ent, DO NOT EDIT.

package eventparticipant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the eventparticipant type in the database.
	Label = "event_participant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserAddress holds the string denoting the useraddress field in the database.
	FieldUserAddress = "user_address"
	// FieldIsCheckedIn holds the string denoting the ischeckedin field in the database.
	FieldIsCheckedIn = "is_checked_in"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// Table holds the table name of the eventparticipant in the database.
	Table = "event_participants"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "event_participants"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_event_id"
)

// Columns holds all SQL columns for eventparticipant fields.
var Columns = []string{
	FieldID,
	FieldUserAddress,
	FieldIsCheckedIn,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "event_participants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_event_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUserAddress holds the default value on creation for the "userAddress" field.
	DefaultUserAddress string
	// DefaultIsCheckedIn holds the default value on creation for the "isCheckedIn" field.
	DefaultIsCheckedIn bool
)

// OrderOption defines the ordering options for the EventParticipant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserAddress orders the results by the userAddress field.
func ByUserAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAddress, opts...).ToFunc()
}

// ByIsCheckedIn orders the results by the isCheckedIn field.
func ByIsCheckedIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCheckedIn, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}
