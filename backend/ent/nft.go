// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/nft"
	"backend/ent/schema"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Nft is the model entity for the Nft schema.
type Nft struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NftID holds the value of the "nft_id" field.
	NftID int64 `json:"nft_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata schema.Metadata `json:"metadata,omitempty"`
	// OwnerAddress holds the value of the "owner_address" field.
	OwnerAddress string `json:"owner_address,omitempty"`
	// MintTime holds the value of the "mint_time" field.
	MintTime time.Time `json:"mint_time,omitempty"`
	// Rarity holds the value of the "rarity" field.
	Rarity string `json:"rarity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NftQuery when eager-loading is set.
	Edges        NftEdges `json:"edges"`
	event_nfts   *int
	selectValues sql.SelectValues
}

// NftEdges holds the relations/edges for other nodes in the graph.
type NftEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NftEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nft) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nft.FieldMetadata:
			values[i] = new([]byte)
		case nft.FieldID, nft.FieldNftID:
			values[i] = new(sql.NullInt64)
		case nft.FieldOwnerAddress, nft.FieldRarity:
			values[i] = new(sql.NullString)
		case nft.FieldMintTime:
			values[i] = new(sql.NullTime)
		case nft.ForeignKeys[0]: // event_nfts
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nft fields.
func (_m *Nft) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nft.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case nft.FieldNftID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nft_id", values[i])
			} else if value.Valid {
				_m.NftID = value.Int64
			}
		case nft.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case nft.FieldOwnerAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_address", values[i])
			} else if value.Valid {
				_m.OwnerAddress = value.String
			}
		case nft.FieldMintTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mint_time", values[i])
			} else if value.Valid {
				_m.MintTime = value.Time
			}
		case nft.FieldRarity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rarity", values[i])
			} else if value.Valid {
				_m.Rarity = value.String
			}
		case nft.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_nfts", value)
			} else if value.Valid {
				_m.event_nfts = new(int)
				*_m.event_nfts = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Nft.
// This includes values selected through modifiers, order, etc.
func (_m *Nft) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the Nft entity.
func (_m *Nft) QueryEvent() *EventQuery {
	return NewNftClient(_m.config).QueryEvent(_m)
}

// Update returns a builder for updating this Nft.
// Note that you need to call Nft.Unwrap() before calling this method if this Nft
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Nft) Update() *NftUpdateOne {
	return NewNftClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Nft entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Nft) Unwrap() *Nft {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nft is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Nft) String() string {
	var builder strings.Builder
	builder.WriteString("Nft(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("nft_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NftID))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", _m.Metadata))
	builder.WriteString(", ")
	builder.WriteString("owner_address=")
	builder.WriteString(_m.OwnerAddress)
	builder.WriteString(", ")
	builder.WriteString("mint_time=")
	builder.WriteString(_m.MintTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rarity=")
	builder.WriteString(_m.Rarity)
	builder.WriteByte(')')
	return builder.String()
}

// Nfts is a parsable slice of Nft.
type Nfts []*Nft
