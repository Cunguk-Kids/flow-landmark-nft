// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/eventparticipant"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// EventParticipant is the model entity for the EventParticipant schema.
type EventParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserAddress holds the value of the "userAddress" field.
	UserAddress string `json:"userAddress,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventParticipantQuery when eager-loading is set.
	Edges          EventParticipantEdges `json:"edges"`
	event_event_id *int
	selectValues   sql.SelectValues
}

// EventParticipantEdges holds the relations/edges for other nodes in the graph.
type EventParticipantEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventParticipantEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EventParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case eventparticipant.FieldID:
			values[i] = new(sql.NullInt64)
		case eventparticipant.FieldUserAddress:
			values[i] = new(sql.NullString)
		case eventparticipant.ForeignKeys[0]: // event_event_id
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EventParticipant fields.
func (_m *EventParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case eventparticipant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case eventparticipant.FieldUserAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userAddress", values[i])
			} else if value.Valid {
				_m.UserAddress = value.String
			}
		case eventparticipant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_event_id", value)
			} else if value.Valid {
				_m.event_event_id = new(int)
				*_m.event_event_id = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EventParticipant.
// This includes values selected through modifiers, order, etc.
func (_m *EventParticipant) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the EventParticipant entity.
func (_m *EventParticipant) QueryEvent() *EventQuery {
	return NewEventParticipantClient(_m.config).QueryEvent(_m)
}

// Update returns a builder for updating this EventParticipant.
// Note that you need to call EventParticipant.Unwrap() before calling this method if this EventParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *EventParticipant) Update() *EventParticipantUpdateOne {
	return NewEventParticipantClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the EventParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *EventParticipant) Unwrap() *EventParticipant {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: EventParticipant is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *EventParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("EventParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("userAddress=")
	builder.WriteString(_m.UserAddress)
	builder.WriteByte(')')
	return builder.String()
}

// EventParticipants is a parsable slice of EventParticipant.
type EventParticipants []*EventParticipant
