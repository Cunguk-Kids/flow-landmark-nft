// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/eventparticipant"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (_u *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEventId sets the "eventId" field.
func (_u *EventUpdate) SetEventId(v int) *EventUpdate {
	_u.mutation.ResetEventId()
	_u.mutation.SetEventId(v)
	return _u
}

// SetNillableEventId sets the "eventId" field if the given value is not nil.
func (_u *EventUpdate) SetNillableEventId(v *int) *EventUpdate {
	if v != nil {
		_u.SetEventId(*v)
	}
	return _u
}

// AddEventId adds value to the "eventId" field.
func (_u *EventUpdate) AddEventId(v int) *EventUpdate {
	_u.mutation.AddEventId(v)
	return _u
}

// SetBrandAddress sets the "brandAddress" field.
func (_u *EventUpdate) SetBrandAddress(v string) *EventUpdate {
	_u.mutation.SetBrandAddress(v)
	return _u
}

// SetNillableBrandAddress sets the "brandAddress" field if the given value is not nil.
func (_u *EventUpdate) SetNillableBrandAddress(v *string) *EventUpdate {
	if v != nil {
		_u.SetBrandAddress(*v)
	}
	return _u
}

// AddEventIDIDs adds the "event_id" edge to the EventParticipant entity by IDs.
func (_u *EventUpdate) AddEventIDIDs(ids ...int) *EventUpdate {
	_u.mutation.AddEventIDIDs(ids...)
	return _u
}

// AddEventID adds the "event_id" edges to the EventParticipant entity.
func (_u *EventUpdate) AddEventID(v ...*EventParticipant) *EventUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (_u *EventUpdate) Mutation() *EventMutation {
	return _u.mutation
}

// ClearEventID clears all "event_id" edges to the EventParticipant entity.
func (_u *EventUpdate) ClearEventID() *EventUpdate {
	_u.mutation.ClearEventID()
	return _u
}

// RemoveEventIDIDs removes the "event_id" edge to EventParticipant entities by IDs.
func (_u *EventUpdate) RemoveEventIDIDs(ids ...int) *EventUpdate {
	_u.mutation.RemoveEventIDIDs(ids...)
	return _u
}

// RemoveEventID removes "event_id" edges to EventParticipant entities.
func (_u *EventUpdate) RemoveEventID(v ...*EventParticipant) *EventUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EventUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *EventUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EventId(); ok {
		_spec.SetField(event.FieldEventId, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEventId(); ok {
		_spec.AddField(event.FieldEventId, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BrandAddress(); ok {
		_spec.SetField(event.FieldBrandAddress, field.TypeString, value)
	}
	if _u.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventIDTable,
			Columns: []string{event.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventIDIDs(); len(nodes) > 0 && !_u.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventIDTable,
			Columns: []string{event.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventIDTable,
			Columns: []string{event.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetEventId sets the "eventId" field.
func (_u *EventUpdateOne) SetEventId(v int) *EventUpdateOne {
	_u.mutation.ResetEventId()
	_u.mutation.SetEventId(v)
	return _u
}

// SetNillableEventId sets the "eventId" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableEventId(v *int) *EventUpdateOne {
	if v != nil {
		_u.SetEventId(*v)
	}
	return _u
}

// AddEventId adds value to the "eventId" field.
func (_u *EventUpdateOne) AddEventId(v int) *EventUpdateOne {
	_u.mutation.AddEventId(v)
	return _u
}

// SetBrandAddress sets the "brandAddress" field.
func (_u *EventUpdateOne) SetBrandAddress(v string) *EventUpdateOne {
	_u.mutation.SetBrandAddress(v)
	return _u
}

// SetNillableBrandAddress sets the "brandAddress" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableBrandAddress(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetBrandAddress(*v)
	}
	return _u
}

// AddEventIDIDs adds the "event_id" edge to the EventParticipant entity by IDs.
func (_u *EventUpdateOne) AddEventIDIDs(ids ...int) *EventUpdateOne {
	_u.mutation.AddEventIDIDs(ids...)
	return _u
}

// AddEventID adds the "event_id" edges to the EventParticipant entity.
func (_u *EventUpdateOne) AddEventID(v ...*EventParticipant) *EventUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (_u *EventUpdateOne) Mutation() *EventMutation {
	return _u.mutation
}

// ClearEventID clears all "event_id" edges to the EventParticipant entity.
func (_u *EventUpdateOne) ClearEventID() *EventUpdateOne {
	_u.mutation.ClearEventID()
	return _u
}

// RemoveEventIDIDs removes the "event_id" edge to EventParticipant entities by IDs.
func (_u *EventUpdateOne) RemoveEventIDIDs(ids ...int) *EventUpdateOne {
	_u.mutation.RemoveEventIDIDs(ids...)
	return _u
}

// RemoveEventID removes "event_id" edges to EventParticipant entities.
func (_u *EventUpdateOne) RemoveEventID(v ...*EventParticipant) *EventUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (_u *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Event entity.
func (_u *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EventId(); ok {
		_spec.SetField(event.FieldEventId, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEventId(); ok {
		_spec.AddField(event.FieldEventId, field.TypeInt, value)
	}
	if value, ok := _u.mutation.BrandAddress(); ok {
		_spec.SetField(event.FieldBrandAddress, field.TypeString, value)
	}
	if _u.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventIDTable,
			Columns: []string{event.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventIDIDs(); len(nodes) > 0 && !_u.mutation.EventIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventIDTable,
			Columns: []string{event.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.EventIDTable,
			Columns: []string{event.EventIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(eventparticipant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
