// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/eventparticipant"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvent            = "Event"
	TypeEventParticipant = "EventParticipant"
)

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op              Op
	typ             string
	id              *int
	eventId         *int
	addeventId      *int
	brandAddress    *string
	eventName       *string
	quota           *int
	addquota        *int
	counter         *int
	addcounter      *int
	description     *string
	image           *string
	lat             *float64
	addlat          *float64
	long            *float64
	addlong         *float64
	radius          *float64
	addradius       *float64
	status          *int
	addstatus       *int
	startDate       *float64
	addstartDate    *float64
	endDate         *float64
	addendDate      *float64
	totalRareNFT    *int
	addtotalRareNFT *int
	clearedFields   map[string]struct{}
	event_id        map[int]struct{}
	removedevent_id map[int]struct{}
	clearedevent_id bool
	done            bool
	oldValue        func(context.Context) (*Event, error)
	predicates      []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventId sets the "eventId" field.
func (m *EventMutation) SetEventId(i int) {
	m.eventId = &i
	m.addeventId = nil
}

// EventId returns the value of the "eventId" field in the mutation.
func (m *EventMutation) EventId() (r int, exists bool) {
	v := m.eventId
	if v == nil {
		return
	}
	return *v, true
}

// OldEventId returns the old "eventId" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEventId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventId: %w", err)
	}
	return oldValue.EventId, nil
}

// AddEventId adds i to the "eventId" field.
func (m *EventMutation) AddEventId(i int) {
	if m.addeventId != nil {
		*m.addeventId += i
	} else {
		m.addeventId = &i
	}
}

// AddedEventId returns the value that was added to the "eventId" field in this mutation.
func (m *EventMutation) AddedEventId() (r int, exists bool) {
	v := m.addeventId
	if v == nil {
		return
	}
	return *v, true
}

// ResetEventId resets all changes to the "eventId" field.
func (m *EventMutation) ResetEventId() {
	m.eventId = nil
	m.addeventId = nil
}

// SetBrandAddress sets the "brandAddress" field.
func (m *EventMutation) SetBrandAddress(s string) {
	m.brandAddress = &s
}

// BrandAddress returns the value of the "brandAddress" field in the mutation.
func (m *EventMutation) BrandAddress() (r string, exists bool) {
	v := m.brandAddress
	if v == nil {
		return
	}
	return *v, true
}

// OldBrandAddress returns the old "brandAddress" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldBrandAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrandAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrandAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrandAddress: %w", err)
	}
	return oldValue.BrandAddress, nil
}

// ResetBrandAddress resets all changes to the "brandAddress" field.
func (m *EventMutation) ResetBrandAddress() {
	m.brandAddress = nil
}

// SetEventName sets the "eventName" field.
func (m *EventMutation) SetEventName(s string) {
	m.eventName = &s
}

// EventName returns the value of the "eventName" field in the mutation.
func (m *EventMutation) EventName() (r string, exists bool) {
	v := m.eventName
	if v == nil {
		return
	}
	return *v, true
}

// OldEventName returns the old "eventName" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEventName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventName: %w", err)
	}
	return oldValue.EventName, nil
}

// ResetEventName resets all changes to the "eventName" field.
func (m *EventMutation) ResetEventName() {
	m.eventName = nil
}

// SetQuota sets the "quota" field.
func (m *EventMutation) SetQuota(i int) {
	m.quota = &i
	m.addquota = nil
}

// Quota returns the value of the "quota" field in the mutation.
func (m *EventMutation) Quota() (r int, exists bool) {
	v := m.quota
	if v == nil {
		return
	}
	return *v, true
}

// OldQuota returns the old "quota" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldQuota(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuota is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuota requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuota: %w", err)
	}
	return oldValue.Quota, nil
}

// AddQuota adds i to the "quota" field.
func (m *EventMutation) AddQuota(i int) {
	if m.addquota != nil {
		*m.addquota += i
	} else {
		m.addquota = &i
	}
}

// AddedQuota returns the value that was added to the "quota" field in this mutation.
func (m *EventMutation) AddedQuota() (r int, exists bool) {
	v := m.addquota
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuota resets all changes to the "quota" field.
func (m *EventMutation) ResetQuota() {
	m.quota = nil
	m.addquota = nil
}

// SetCounter sets the "counter" field.
func (m *EventMutation) SetCounter(i int) {
	m.counter = &i
	m.addcounter = nil
}

// Counter returns the value of the "counter" field in the mutation.
func (m *EventMutation) Counter() (r int, exists bool) {
	v := m.counter
	if v == nil {
		return
	}
	return *v, true
}

// OldCounter returns the old "counter" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCounter(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounter: %w", err)
	}
	return oldValue.Counter, nil
}

// AddCounter adds i to the "counter" field.
func (m *EventMutation) AddCounter(i int) {
	if m.addcounter != nil {
		*m.addcounter += i
	} else {
		m.addcounter = &i
	}
}

// AddedCounter returns the value that was added to the "counter" field in this mutation.
func (m *EventMutation) AddedCounter() (r int, exists bool) {
	v := m.addcounter
	if v == nil {
		return
	}
	return *v, true
}

// ResetCounter resets all changes to the "counter" field.
func (m *EventMutation) ResetCounter() {
	m.counter = nil
	m.addcounter = nil
}

// SetDescription sets the "description" field.
func (m *EventMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EventMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *EventMutation) ResetDescription() {
	m.description = nil
}

// SetImage sets the "image" field.
func (m *EventMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *EventMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *EventMutation) ResetImage() {
	m.image = nil
}

// SetLat sets the "lat" field.
func (m *EventMutation) SetLat(f float64) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *EventMutation) Lat() (r float64, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldLat(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *EventMutation) AddLat(f float64) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *EventMutation) AddedLat() (r float64, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ResetLat resets all changes to the "lat" field.
func (m *EventMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
}

// SetLong sets the "long" field.
func (m *EventMutation) SetLong(f float64) {
	m.long = &f
	m.addlong = nil
}

// Long returns the value of the "long" field in the mutation.
func (m *EventMutation) Long() (r float64, exists bool) {
	v := m.long
	if v == nil {
		return
	}
	return *v, true
}

// OldLong returns the old "long" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldLong(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLong is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLong requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLong: %w", err)
	}
	return oldValue.Long, nil
}

// AddLong adds f to the "long" field.
func (m *EventMutation) AddLong(f float64) {
	if m.addlong != nil {
		*m.addlong += f
	} else {
		m.addlong = &f
	}
}

// AddedLong returns the value that was added to the "long" field in this mutation.
func (m *EventMutation) AddedLong() (r float64, exists bool) {
	v := m.addlong
	if v == nil {
		return
	}
	return *v, true
}

// ResetLong resets all changes to the "long" field.
func (m *EventMutation) ResetLong() {
	m.long = nil
	m.addlong = nil
}

// SetRadius sets the "radius" field.
func (m *EventMutation) SetRadius(f float64) {
	m.radius = &f
	m.addradius = nil
}

// Radius returns the value of the "radius" field in the mutation.
func (m *EventMutation) Radius() (r float64, exists bool) {
	v := m.radius
	if v == nil {
		return
	}
	return *v, true
}

// OldRadius returns the old "radius" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldRadius(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRadius is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRadius requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRadius: %w", err)
	}
	return oldValue.Radius, nil
}

// AddRadius adds f to the "radius" field.
func (m *EventMutation) AddRadius(f float64) {
	if m.addradius != nil {
		*m.addradius += f
	} else {
		m.addradius = &f
	}
}

// AddedRadius returns the value that was added to the "radius" field in this mutation.
func (m *EventMutation) AddedRadius() (r float64, exists bool) {
	v := m.addradius
	if v == nil {
		return
	}
	return *v, true
}

// ResetRadius resets all changes to the "radius" field.
func (m *EventMutation) ResetRadius() {
	m.radius = nil
	m.addradius = nil
}

// SetStatus sets the "status" field.
func (m *EventMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *EventMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *EventMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *EventMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *EventMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetStartDate sets the "startDate" field.
func (m *EventMutation) SetStartDate(f float64) {
	m.startDate = &f
	m.addstartDate = nil
}

// StartDate returns the value of the "startDate" field in the mutation.
func (m *EventMutation) StartDate() (r float64, exists bool) {
	v := m.startDate
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "startDate" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStartDate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// AddStartDate adds f to the "startDate" field.
func (m *EventMutation) AddStartDate(f float64) {
	if m.addstartDate != nil {
		*m.addstartDate += f
	} else {
		m.addstartDate = &f
	}
}

// AddedStartDate returns the value that was added to the "startDate" field in this mutation.
func (m *EventMutation) AddedStartDate() (r float64, exists bool) {
	v := m.addstartDate
	if v == nil {
		return
	}
	return *v, true
}

// ResetStartDate resets all changes to the "startDate" field.
func (m *EventMutation) ResetStartDate() {
	m.startDate = nil
	m.addstartDate = nil
}

// SetEndDate sets the "endDate" field.
func (m *EventMutation) SetEndDate(f float64) {
	m.endDate = &f
	m.addendDate = nil
}

// EndDate returns the value of the "endDate" field in the mutation.
func (m *EventMutation) EndDate() (r float64, exists bool) {
	v := m.endDate
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "endDate" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEndDate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// AddEndDate adds f to the "endDate" field.
func (m *EventMutation) AddEndDate(f float64) {
	if m.addendDate != nil {
		*m.addendDate += f
	} else {
		m.addendDate = &f
	}
}

// AddedEndDate returns the value that was added to the "endDate" field in this mutation.
func (m *EventMutation) AddedEndDate() (r float64, exists bool) {
	v := m.addendDate
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndDate resets all changes to the "endDate" field.
func (m *EventMutation) ResetEndDate() {
	m.endDate = nil
	m.addendDate = nil
}

// SetTotalRareNFT sets the "totalRareNFT" field.
func (m *EventMutation) SetTotalRareNFT(i int) {
	m.totalRareNFT = &i
	m.addtotalRareNFT = nil
}

// TotalRareNFT returns the value of the "totalRareNFT" field in the mutation.
func (m *EventMutation) TotalRareNFT() (r int, exists bool) {
	v := m.totalRareNFT
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalRareNFT returns the old "totalRareNFT" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTotalRareNFT(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalRareNFT is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalRareNFT requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalRareNFT: %w", err)
	}
	return oldValue.TotalRareNFT, nil
}

// AddTotalRareNFT adds i to the "totalRareNFT" field.
func (m *EventMutation) AddTotalRareNFT(i int) {
	if m.addtotalRareNFT != nil {
		*m.addtotalRareNFT += i
	} else {
		m.addtotalRareNFT = &i
	}
}

// AddedTotalRareNFT returns the value that was added to the "totalRareNFT" field in this mutation.
func (m *EventMutation) AddedTotalRareNFT() (r int, exists bool) {
	v := m.addtotalRareNFT
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalRareNFT resets all changes to the "totalRareNFT" field.
func (m *EventMutation) ResetTotalRareNFT() {
	m.totalRareNFT = nil
	m.addtotalRareNFT = nil
}

// AddEventIDIDs adds the "event_id" edge to the EventParticipant entity by ids.
func (m *EventMutation) AddEventIDIDs(ids ...int) {
	if m.event_id == nil {
		m.event_id = make(map[int]struct{})
	}
	for i := range ids {
		m.event_id[ids[i]] = struct{}{}
	}
}

// ClearEventID clears the "event_id" edge to the EventParticipant entity.
func (m *EventMutation) ClearEventID() {
	m.clearedevent_id = true
}

// EventIDCleared reports if the "event_id" edge to the EventParticipant entity was cleared.
func (m *EventMutation) EventIDCleared() bool {
	return m.clearedevent_id
}

// RemoveEventIDIDs removes the "event_id" edge to the EventParticipant entity by IDs.
func (m *EventMutation) RemoveEventIDIDs(ids ...int) {
	if m.removedevent_id == nil {
		m.removedevent_id = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.event_id, ids[i])
		m.removedevent_id[ids[i]] = struct{}{}
	}
}

// RemovedEventID returns the removed IDs of the "event_id" edge to the EventParticipant entity.
func (m *EventMutation) RemovedEventIDIDs() (ids []int) {
	for id := range m.removedevent_id {
		ids = append(ids, id)
	}
	return
}

// EventIDIDs returns the "event_id" edge IDs in the mutation.
func (m *EventMutation) EventIDIDs() (ids []int) {
	for id := range m.event_id {
		ids = append(ids, id)
	}
	return
}

// ResetEventID resets all changes to the "event_id" edge.
func (m *EventMutation) ResetEventID() {
	m.event_id = nil
	m.clearedevent_id = false
	m.removedevent_id = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.eventId != nil {
		fields = append(fields, event.FieldEventId)
	}
	if m.brandAddress != nil {
		fields = append(fields, event.FieldBrandAddress)
	}
	if m.eventName != nil {
		fields = append(fields, event.FieldEventName)
	}
	if m.quota != nil {
		fields = append(fields, event.FieldQuota)
	}
	if m.counter != nil {
		fields = append(fields, event.FieldCounter)
	}
	if m.description != nil {
		fields = append(fields, event.FieldDescription)
	}
	if m.image != nil {
		fields = append(fields, event.FieldImage)
	}
	if m.lat != nil {
		fields = append(fields, event.FieldLat)
	}
	if m.long != nil {
		fields = append(fields, event.FieldLong)
	}
	if m.radius != nil {
		fields = append(fields, event.FieldRadius)
	}
	if m.status != nil {
		fields = append(fields, event.FieldStatus)
	}
	if m.startDate != nil {
		fields = append(fields, event.FieldStartDate)
	}
	if m.endDate != nil {
		fields = append(fields, event.FieldEndDate)
	}
	if m.totalRareNFT != nil {
		fields = append(fields, event.FieldTotalRareNFT)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldEventId:
		return m.EventId()
	case event.FieldBrandAddress:
		return m.BrandAddress()
	case event.FieldEventName:
		return m.EventName()
	case event.FieldQuota:
		return m.Quota()
	case event.FieldCounter:
		return m.Counter()
	case event.FieldDescription:
		return m.Description()
	case event.FieldImage:
		return m.Image()
	case event.FieldLat:
		return m.Lat()
	case event.FieldLong:
		return m.Long()
	case event.FieldRadius:
		return m.Radius()
	case event.FieldStatus:
		return m.Status()
	case event.FieldStartDate:
		return m.StartDate()
	case event.FieldEndDate:
		return m.EndDate()
	case event.FieldTotalRareNFT:
		return m.TotalRareNFT()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldEventId:
		return m.OldEventId(ctx)
	case event.FieldBrandAddress:
		return m.OldBrandAddress(ctx)
	case event.FieldEventName:
		return m.OldEventName(ctx)
	case event.FieldQuota:
		return m.OldQuota(ctx)
	case event.FieldCounter:
		return m.OldCounter(ctx)
	case event.FieldDescription:
		return m.OldDescription(ctx)
	case event.FieldImage:
		return m.OldImage(ctx)
	case event.FieldLat:
		return m.OldLat(ctx)
	case event.FieldLong:
		return m.OldLong(ctx)
	case event.FieldRadius:
		return m.OldRadius(ctx)
	case event.FieldStatus:
		return m.OldStatus(ctx)
	case event.FieldStartDate:
		return m.OldStartDate(ctx)
	case event.FieldEndDate:
		return m.OldEndDate(ctx)
	case event.FieldTotalRareNFT:
		return m.OldTotalRareNFT(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldEventId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventId(v)
		return nil
	case event.FieldBrandAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrandAddress(v)
		return nil
	case event.FieldEventName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventName(v)
		return nil
	case event.FieldQuota:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuota(v)
		return nil
	case event.FieldCounter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounter(v)
		return nil
	case event.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case event.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case event.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case event.FieldLong:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLong(v)
		return nil
	case event.FieldRadius:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRadius(v)
		return nil
	case event.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case event.FieldStartDate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case event.FieldEndDate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case event.FieldTotalRareNFT:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalRareNFT(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	if m.addeventId != nil {
		fields = append(fields, event.FieldEventId)
	}
	if m.addquota != nil {
		fields = append(fields, event.FieldQuota)
	}
	if m.addcounter != nil {
		fields = append(fields, event.FieldCounter)
	}
	if m.addlat != nil {
		fields = append(fields, event.FieldLat)
	}
	if m.addlong != nil {
		fields = append(fields, event.FieldLong)
	}
	if m.addradius != nil {
		fields = append(fields, event.FieldRadius)
	}
	if m.addstatus != nil {
		fields = append(fields, event.FieldStatus)
	}
	if m.addstartDate != nil {
		fields = append(fields, event.FieldStartDate)
	}
	if m.addendDate != nil {
		fields = append(fields, event.FieldEndDate)
	}
	if m.addtotalRareNFT != nil {
		fields = append(fields, event.FieldTotalRareNFT)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case event.FieldEventId:
		return m.AddedEventId()
	case event.FieldQuota:
		return m.AddedQuota()
	case event.FieldCounter:
		return m.AddedCounter()
	case event.FieldLat:
		return m.AddedLat()
	case event.FieldLong:
		return m.AddedLong()
	case event.FieldRadius:
		return m.AddedRadius()
	case event.FieldStatus:
		return m.AddedStatus()
	case event.FieldStartDate:
		return m.AddedStartDate()
	case event.FieldEndDate:
		return m.AddedEndDate()
	case event.FieldTotalRareNFT:
		return m.AddedTotalRareNFT()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case event.FieldEventId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEventId(v)
		return nil
	case event.FieldQuota:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuota(v)
		return nil
	case event.FieldCounter:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCounter(v)
		return nil
	case event.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	case event.FieldLong:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLong(v)
		return nil
	case event.FieldRadius:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRadius(v)
		return nil
	case event.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case event.FieldStartDate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartDate(v)
		return nil
	case event.FieldEndDate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndDate(v)
		return nil
	case event.FieldTotalRareNFT:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalRareNFT(v)
		return nil
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldEventId:
		m.ResetEventId()
		return nil
	case event.FieldBrandAddress:
		m.ResetBrandAddress()
		return nil
	case event.FieldEventName:
		m.ResetEventName()
		return nil
	case event.FieldQuota:
		m.ResetQuota()
		return nil
	case event.FieldCounter:
		m.ResetCounter()
		return nil
	case event.FieldDescription:
		m.ResetDescription()
		return nil
	case event.FieldImage:
		m.ResetImage()
		return nil
	case event.FieldLat:
		m.ResetLat()
		return nil
	case event.FieldLong:
		m.ResetLong()
		return nil
	case event.FieldRadius:
		m.ResetRadius()
		return nil
	case event.FieldStatus:
		m.ResetStatus()
		return nil
	case event.FieldStartDate:
		m.ResetStartDate()
		return nil
	case event.FieldEndDate:
		m.ResetEndDate()
		return nil
	case event.FieldTotalRareNFT:
		m.ResetTotalRareNFT()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event_id != nil {
		edges = append(edges, event.EdgeEventID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeEventID:
		ids := make([]ent.Value, 0, len(m.event_id))
		for id := range m.event_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedevent_id != nil {
		edges = append(edges, event.EdgeEventID)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeEventID:
		ids := make([]ent.Value, 0, len(m.removedevent_id))
		for id := range m.removedevent_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent_id {
		edges = append(edges, event.EdgeEventID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeEventID:
		return m.clearedevent_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeEventID:
		m.ResetEventID()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// EventParticipantMutation represents an operation that mutates the EventParticipant nodes in the graph.
type EventParticipantMutation struct {
	config
	op            Op
	typ           string
	id            *int
	userAddress   *string
	isCheckedIn   *bool
	clearedFields map[string]struct{}
	event         *int
	clearedevent  bool
	done          bool
	oldValue      func(context.Context) (*EventParticipant, error)
	predicates    []predicate.EventParticipant
}

var _ ent.Mutation = (*EventParticipantMutation)(nil)

// eventparticipantOption allows management of the mutation configuration using functional options.
type eventparticipantOption func(*EventParticipantMutation)

// newEventParticipantMutation creates new mutation for the EventParticipant entity.
func newEventParticipantMutation(c config, op Op, opts ...eventparticipantOption) *EventParticipantMutation {
	m := &EventParticipantMutation{
		config:        c,
		op:            op,
		typ:           TypeEventParticipant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventParticipantID sets the ID field of the mutation.
func withEventParticipantID(id int) eventparticipantOption {
	return func(m *EventParticipantMutation) {
		var (
			err   error
			once  sync.Once
			value *EventParticipant
		)
		m.oldValue = func(ctx context.Context) (*EventParticipant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EventParticipant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEventParticipant sets the old EventParticipant of the mutation.
func withEventParticipant(node *EventParticipant) eventparticipantOption {
	return func(m *EventParticipantMutation) {
		m.oldValue = func(context.Context) (*EventParticipant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventParticipantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventParticipantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventParticipantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventParticipantMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EventParticipant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserAddress sets the "userAddress" field.
func (m *EventParticipantMutation) SetUserAddress(s string) {
	m.userAddress = &s
}

// UserAddress returns the value of the "userAddress" field in the mutation.
func (m *EventParticipantMutation) UserAddress() (r string, exists bool) {
	v := m.userAddress
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAddress returns the old "userAddress" field's value of the EventParticipant entity.
// If the EventParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventParticipantMutation) OldUserAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAddress: %w", err)
	}
	return oldValue.UserAddress, nil
}

// ResetUserAddress resets all changes to the "userAddress" field.
func (m *EventParticipantMutation) ResetUserAddress() {
	m.userAddress = nil
}

// SetIsCheckedIn sets the "isCheckedIn" field.
func (m *EventParticipantMutation) SetIsCheckedIn(b bool) {
	m.isCheckedIn = &b
}

// IsCheckedIn returns the value of the "isCheckedIn" field in the mutation.
func (m *EventParticipantMutation) IsCheckedIn() (r bool, exists bool) {
	v := m.isCheckedIn
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCheckedIn returns the old "isCheckedIn" field's value of the EventParticipant entity.
// If the EventParticipant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventParticipantMutation) OldIsCheckedIn(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCheckedIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCheckedIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCheckedIn: %w", err)
	}
	return oldValue.IsCheckedIn, nil
}

// ResetIsCheckedIn resets all changes to the "isCheckedIn" field.
func (m *EventParticipantMutation) ResetIsCheckedIn() {
	m.isCheckedIn = nil
}

// SetEventID sets the "event" edge to the Event entity by id.
func (m *EventParticipantMutation) SetEventID(id int) {
	m.event = &id
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *EventParticipantMutation) ClearEvent() {
	m.clearedevent = true
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *EventParticipantMutation) EventCleared() bool {
	return m.clearedevent
}

// EventID returns the "event" edge ID in the mutation.
func (m *EventParticipantMutation) EventID() (id int, exists bool) {
	if m.event != nil {
		return *m.event, true
	}
	return
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *EventParticipantMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *EventParticipantMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// Where appends a list predicates to the EventParticipantMutation builder.
func (m *EventParticipantMutation) Where(ps ...predicate.EventParticipant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventParticipantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventParticipantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EventParticipant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventParticipantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventParticipantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EventParticipant).
func (m *EventParticipantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventParticipantMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.userAddress != nil {
		fields = append(fields, eventparticipant.FieldUserAddress)
	}
	if m.isCheckedIn != nil {
		fields = append(fields, eventparticipant.FieldIsCheckedIn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventParticipantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case eventparticipant.FieldUserAddress:
		return m.UserAddress()
	case eventparticipant.FieldIsCheckedIn:
		return m.IsCheckedIn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventParticipantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case eventparticipant.FieldUserAddress:
		return m.OldUserAddress(ctx)
	case eventparticipant.FieldIsCheckedIn:
		return m.OldIsCheckedIn(ctx)
	}
	return nil, fmt.Errorf("unknown EventParticipant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventParticipantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case eventparticipant.FieldUserAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAddress(v)
		return nil
	case eventparticipant.FieldIsCheckedIn:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCheckedIn(v)
		return nil
	}
	return fmt.Errorf("unknown EventParticipant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventParticipantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventParticipantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventParticipantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EventParticipant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventParticipantMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventParticipantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventParticipantMutation) ClearField(name string) error {
	return fmt.Errorf("unknown EventParticipant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventParticipantMutation) ResetField(name string) error {
	switch name {
	case eventparticipant.FieldUserAddress:
		m.ResetUserAddress()
		return nil
	case eventparticipant.FieldIsCheckedIn:
		m.ResetIsCheckedIn()
		return nil
	}
	return fmt.Errorf("unknown EventParticipant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventParticipantMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.event != nil {
		edges = append(edges, eventparticipant.EdgeEvent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventParticipantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case eventparticipant.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventParticipantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventParticipantMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventParticipantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevent {
		edges = append(edges, eventparticipant.EdgeEvent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventParticipantMutation) EdgeCleared(name string) bool {
	switch name {
	case eventparticipant.EdgeEvent:
		return m.clearedevent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventParticipantMutation) ClearEdge(name string) error {
	switch name {
	case eventparticipant.EdgeEvent:
		m.ClearEvent()
		return nil
	}
	return fmt.Errorf("unknown EventParticipant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventParticipantMutation) ResetEdge(name string) error {
	switch name {
	case eventparticipant.EdgeEvent:
		m.ResetEvent()
		return nil
	}
	return fmt.Errorf("unknown EventParticipant edge %s", name)
}
