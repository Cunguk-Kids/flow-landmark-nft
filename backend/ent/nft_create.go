// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/nft"
	"backend/ent/schema"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NftCreate is the builder for creating a Nft entity.
type NftCreate struct {
	config
	mutation *NftMutation
	hooks    []Hook
}

// SetNftID sets the "nft_id" field.
func (_c *NftCreate) SetNftID(v int64) *NftCreate {
	_c.mutation.SetNftID(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *NftCreate) SetMetadata(v schema.Metadata) *NftCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetOwnerAddress sets the "owner_address" field.
func (_c *NftCreate) SetOwnerAddress(v string) *NftCreate {
	_c.mutation.SetOwnerAddress(v)
	return _c
}

// SetMintTime sets the "mint_time" field.
func (_c *NftCreate) SetMintTime(v time.Time) *NftCreate {
	_c.mutation.SetMintTime(v)
	return _c
}

// SetNillableMintTime sets the "mint_time" field if the given value is not nil.
func (_c *NftCreate) SetNillableMintTime(v *time.Time) *NftCreate {
	if v != nil {
		_c.SetMintTime(*v)
	}
	return _c
}

// SetRarity sets the "rarity" field.
func (_c *NftCreate) SetRarity(v string) *NftCreate {
	_c.mutation.SetRarity(v)
	return _c
}

// SetEventID sets the "event" edge to the Event entity by ID.
func (_c *NftCreate) SetEventID(id int) *NftCreate {
	_c.mutation.SetEventID(id)
	return _c
}

// SetEvent sets the "event" edge to the Event entity.
func (_c *NftCreate) SetEvent(v *Event) *NftCreate {
	return _c.SetEventID(v.ID)
}

// Mutation returns the NftMutation object of the builder.
func (_c *NftCreate) Mutation() *NftMutation {
	return _c.mutation
}

// Save creates the Nft in the database.
func (_c *NftCreate) Save(ctx context.Context) (*Nft, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NftCreate) SaveX(ctx context.Context) *Nft {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NftCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NftCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NftCreate) defaults() {
	if _, ok := _c.mutation.MintTime(); !ok {
		v := nft.DefaultMintTime()
		_c.mutation.SetMintTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NftCreate) check() error {
	if _, ok := _c.mutation.NftID(); !ok {
		return &ValidationError{Name: "nft_id", err: errors.New(`ent: missing required field "Nft.nft_id"`)}
	}
	if _, ok := _c.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Nft.metadata"`)}
	}
	if _, ok := _c.mutation.OwnerAddress(); !ok {
		return &ValidationError{Name: "owner_address", err: errors.New(`ent: missing required field "Nft.owner_address"`)}
	}
	if _, ok := _c.mutation.MintTime(); !ok {
		return &ValidationError{Name: "mint_time", err: errors.New(`ent: missing required field "Nft.mint_time"`)}
	}
	if _, ok := _c.mutation.Rarity(); !ok {
		return &ValidationError{Name: "rarity", err: errors.New(`ent: missing required field "Nft.rarity"`)}
	}
	if len(_c.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "Nft.event"`)}
	}
	return nil
}

func (_c *NftCreate) sqlSave(ctx context.Context) (*Nft, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NftCreate) createSpec() (*Nft, *sqlgraph.CreateSpec) {
	var (
		_node = &Nft{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(nft.Table, sqlgraph.NewFieldSpec(nft.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.NftID(); ok {
		_spec.SetField(nft.FieldNftID, field.TypeInt64, value)
		_node.NftID = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(nft.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.OwnerAddress(); ok {
		_spec.SetField(nft.FieldOwnerAddress, field.TypeString, value)
		_node.OwnerAddress = value
	}
	if value, ok := _c.mutation.MintTime(); ok {
		_spec.SetField(nft.FieldMintTime, field.TypeTime, value)
		_node.MintTime = value
	}
	if value, ok := _c.mutation.Rarity(); ok {
		_spec.SetField(nft.FieldRarity, field.TypeString, value)
		_node.Rarity = value
	}
	if nodes := _c.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nft.EventTable,
			Columns: []string{nft.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.event_nfts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NftCreateBulk is the builder for creating many Nft entities in bulk.
type NftCreateBulk struct {
	config
	err      error
	builders []*NftCreate
}

// Save creates the Nft entities in the database.
func (_c *NftCreateBulk) Save(ctx context.Context) ([]*Nft, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Nft, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NftMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NftCreateBulk) SaveX(ctx context.Context) []*Nft {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NftCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NftCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
