// Code generated by ent, DO NOT EDIT.

package partner

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the partner type in the database.
	Label = "partner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// EdgePartnerAddress holds the string denoting the partner_address edge name in mutations.
	EdgePartnerAddress = "partner_address"
	// Table holds the table name of the partner in the database.
	Table = "partners"
	// PartnerAddressTable is the table that holds the partner_address relation/edge.
	PartnerAddressTable = "events"
	// PartnerAddressInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	PartnerAddressInverseTable = "events"
	// PartnerAddressColumn is the table column denoting the partner_address relation/edge.
	PartnerAddressColumn = "partner_partner_address"
)

// Columns holds all SQL columns for partner fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldName,
	FieldDescription,
	FieldEmail,
	FieldImage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultImage holds the default value on creation for the "image" field.
	DefaultImage string
)

// OrderOption defines the ordering options for the Partner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByPartnerAddressCount orders the results by partner_address count.
func ByPartnerAddressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPartnerAddressStep(), opts...)
	}
}

// ByPartnerAddress orders the results by partner_address terms.
func ByPartnerAddress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPartnerAddressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPartnerAddressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PartnerAddressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PartnerAddressTable, PartnerAddressColumn),
	)
}
