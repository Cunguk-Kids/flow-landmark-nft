// Code generated by ent, DO NOT EDIT.

package nft

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the nft type in the database.
	Label = "nft"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNftID holds the string denoting the nft_id field in the database.
	FieldNftID = "nft_id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldOwnerAddress holds the string denoting the owner_address field in the database.
	FieldOwnerAddress = "owner_address"
	// FieldMintTime holds the string denoting the mint_time field in the database.
	FieldMintTime = "mint_time"
	// FieldRarity holds the string denoting the rarity field in the database.
	FieldRarity = "rarity"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// Table holds the table name of the nft in the database.
	Table = "nfts"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "nfts"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_nfts"
)

// Columns holds all SQL columns for nft fields.
var Columns = []string{
	FieldID,
	FieldNftID,
	FieldMetadata,
	FieldOwnerAddress,
	FieldMintTime,
	FieldRarity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "nfts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"event_nfts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMintTime holds the default value on creation for the "mint_time" field.
	DefaultMintTime func() time.Time
)

// OrderOption defines the ordering options for the Nft queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNftID orders the results by the nft_id field.
func ByNftID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNftID, opts...).ToFunc()
}

// ByOwnerAddress orders the results by the owner_address field.
func ByOwnerAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerAddress, opts...).ToFunc()
}

// ByMintTime orders the results by the mint_time field.
func ByMintTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMintTime, opts...).ToFunc()
}

// ByRarity orders the results by the rarity field.
func ByRarity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRarity, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}
