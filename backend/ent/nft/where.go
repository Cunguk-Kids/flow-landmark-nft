// Code generated by ent, DO NOT EDIT.

package nft

import (
	"backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Nft {
	return predicate.Nft(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Nft {
	return predicate.Nft(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Nft {
	return predicate.Nft(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Nft {
	return predicate.Nft(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Nft {
	return predicate.Nft(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Nft {
	return predicate.Nft(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Nft {
	return predicate.Nft(sql.FieldLTE(FieldID, id))
}

// NftID applies equality check predicate on the "nft_id" field. It's identical to NftIDEQ.
func NftID(v int64) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldNftID, v))
}

// OwnerAddress applies equality check predicate on the "owner_address" field. It's identical to OwnerAddressEQ.
func OwnerAddress(v string) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldOwnerAddress, v))
}

// MintTime applies equality check predicate on the "mint_time" field. It's identical to MintTimeEQ.
func MintTime(v time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldMintTime, v))
}

// Rarity applies equality check predicate on the "rarity" field. It's identical to RarityEQ.
func Rarity(v string) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldRarity, v))
}

// NftIDEQ applies the EQ predicate on the "nft_id" field.
func NftIDEQ(v int64) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldNftID, v))
}

// NftIDNEQ applies the NEQ predicate on the "nft_id" field.
func NftIDNEQ(v int64) predicate.Nft {
	return predicate.Nft(sql.FieldNEQ(FieldNftID, v))
}

// NftIDIn applies the In predicate on the "nft_id" field.
func NftIDIn(vs ...int64) predicate.Nft {
	return predicate.Nft(sql.FieldIn(FieldNftID, vs...))
}

// NftIDNotIn applies the NotIn predicate on the "nft_id" field.
func NftIDNotIn(vs ...int64) predicate.Nft {
	return predicate.Nft(sql.FieldNotIn(FieldNftID, vs...))
}

// NftIDGT applies the GT predicate on the "nft_id" field.
func NftIDGT(v int64) predicate.Nft {
	return predicate.Nft(sql.FieldGT(FieldNftID, v))
}

// NftIDGTE applies the GTE predicate on the "nft_id" field.
func NftIDGTE(v int64) predicate.Nft {
	return predicate.Nft(sql.FieldGTE(FieldNftID, v))
}

// NftIDLT applies the LT predicate on the "nft_id" field.
func NftIDLT(v int64) predicate.Nft {
	return predicate.Nft(sql.FieldLT(FieldNftID, v))
}

// NftIDLTE applies the LTE predicate on the "nft_id" field.
func NftIDLTE(v int64) predicate.Nft {
	return predicate.Nft(sql.FieldLTE(FieldNftID, v))
}

// OwnerAddressEQ applies the EQ predicate on the "owner_address" field.
func OwnerAddressEQ(v string) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldOwnerAddress, v))
}

// OwnerAddressNEQ applies the NEQ predicate on the "owner_address" field.
func OwnerAddressNEQ(v string) predicate.Nft {
	return predicate.Nft(sql.FieldNEQ(FieldOwnerAddress, v))
}

// OwnerAddressIn applies the In predicate on the "owner_address" field.
func OwnerAddressIn(vs ...string) predicate.Nft {
	return predicate.Nft(sql.FieldIn(FieldOwnerAddress, vs...))
}

// OwnerAddressNotIn applies the NotIn predicate on the "owner_address" field.
func OwnerAddressNotIn(vs ...string) predicate.Nft {
	return predicate.Nft(sql.FieldNotIn(FieldOwnerAddress, vs...))
}

// OwnerAddressGT applies the GT predicate on the "owner_address" field.
func OwnerAddressGT(v string) predicate.Nft {
	return predicate.Nft(sql.FieldGT(FieldOwnerAddress, v))
}

// OwnerAddressGTE applies the GTE predicate on the "owner_address" field.
func OwnerAddressGTE(v string) predicate.Nft {
	return predicate.Nft(sql.FieldGTE(FieldOwnerAddress, v))
}

// OwnerAddressLT applies the LT predicate on the "owner_address" field.
func OwnerAddressLT(v string) predicate.Nft {
	return predicate.Nft(sql.FieldLT(FieldOwnerAddress, v))
}

// OwnerAddressLTE applies the LTE predicate on the "owner_address" field.
func OwnerAddressLTE(v string) predicate.Nft {
	return predicate.Nft(sql.FieldLTE(FieldOwnerAddress, v))
}

// OwnerAddressContains applies the Contains predicate on the "owner_address" field.
func OwnerAddressContains(v string) predicate.Nft {
	return predicate.Nft(sql.FieldContains(FieldOwnerAddress, v))
}

// OwnerAddressHasPrefix applies the HasPrefix predicate on the "owner_address" field.
func OwnerAddressHasPrefix(v string) predicate.Nft {
	return predicate.Nft(sql.FieldHasPrefix(FieldOwnerAddress, v))
}

// OwnerAddressHasSuffix applies the HasSuffix predicate on the "owner_address" field.
func OwnerAddressHasSuffix(v string) predicate.Nft {
	return predicate.Nft(sql.FieldHasSuffix(FieldOwnerAddress, v))
}

// OwnerAddressEqualFold applies the EqualFold predicate on the "owner_address" field.
func OwnerAddressEqualFold(v string) predicate.Nft {
	return predicate.Nft(sql.FieldEqualFold(FieldOwnerAddress, v))
}

// OwnerAddressContainsFold applies the ContainsFold predicate on the "owner_address" field.
func OwnerAddressContainsFold(v string) predicate.Nft {
	return predicate.Nft(sql.FieldContainsFold(FieldOwnerAddress, v))
}

// MintTimeEQ applies the EQ predicate on the "mint_time" field.
func MintTimeEQ(v time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldMintTime, v))
}

// MintTimeNEQ applies the NEQ predicate on the "mint_time" field.
func MintTimeNEQ(v time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldNEQ(FieldMintTime, v))
}

// MintTimeIn applies the In predicate on the "mint_time" field.
func MintTimeIn(vs ...time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldIn(FieldMintTime, vs...))
}

// MintTimeNotIn applies the NotIn predicate on the "mint_time" field.
func MintTimeNotIn(vs ...time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldNotIn(FieldMintTime, vs...))
}

// MintTimeGT applies the GT predicate on the "mint_time" field.
func MintTimeGT(v time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldGT(FieldMintTime, v))
}

// MintTimeGTE applies the GTE predicate on the "mint_time" field.
func MintTimeGTE(v time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldGTE(FieldMintTime, v))
}

// MintTimeLT applies the LT predicate on the "mint_time" field.
func MintTimeLT(v time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldLT(FieldMintTime, v))
}

// MintTimeLTE applies the LTE predicate on the "mint_time" field.
func MintTimeLTE(v time.Time) predicate.Nft {
	return predicate.Nft(sql.FieldLTE(FieldMintTime, v))
}

// RarityEQ applies the EQ predicate on the "rarity" field.
func RarityEQ(v string) predicate.Nft {
	return predicate.Nft(sql.FieldEQ(FieldRarity, v))
}

// RarityNEQ applies the NEQ predicate on the "rarity" field.
func RarityNEQ(v string) predicate.Nft {
	return predicate.Nft(sql.FieldNEQ(FieldRarity, v))
}

// RarityIn applies the In predicate on the "rarity" field.
func RarityIn(vs ...string) predicate.Nft {
	return predicate.Nft(sql.FieldIn(FieldRarity, vs...))
}

// RarityNotIn applies the NotIn predicate on the "rarity" field.
func RarityNotIn(vs ...string) predicate.Nft {
	return predicate.Nft(sql.FieldNotIn(FieldRarity, vs...))
}

// RarityGT applies the GT predicate on the "rarity" field.
func RarityGT(v string) predicate.Nft {
	return predicate.Nft(sql.FieldGT(FieldRarity, v))
}

// RarityGTE applies the GTE predicate on the "rarity" field.
func RarityGTE(v string) predicate.Nft {
	return predicate.Nft(sql.FieldGTE(FieldRarity, v))
}

// RarityLT applies the LT predicate on the "rarity" field.
func RarityLT(v string) predicate.Nft {
	return predicate.Nft(sql.FieldLT(FieldRarity, v))
}

// RarityLTE applies the LTE predicate on the "rarity" field.
func RarityLTE(v string) predicate.Nft {
	return predicate.Nft(sql.FieldLTE(FieldRarity, v))
}

// RarityContains applies the Contains predicate on the "rarity" field.
func RarityContains(v string) predicate.Nft {
	return predicate.Nft(sql.FieldContains(FieldRarity, v))
}

// RarityHasPrefix applies the HasPrefix predicate on the "rarity" field.
func RarityHasPrefix(v string) predicate.Nft {
	return predicate.Nft(sql.FieldHasPrefix(FieldRarity, v))
}

// RarityHasSuffix applies the HasSuffix predicate on the "rarity" field.
func RarityHasSuffix(v string) predicate.Nft {
	return predicate.Nft(sql.FieldHasSuffix(FieldRarity, v))
}

// RarityEqualFold applies the EqualFold predicate on the "rarity" field.
func RarityEqualFold(v string) predicate.Nft {
	return predicate.Nft(sql.FieldEqualFold(FieldRarity, v))
}

// RarityContainsFold applies the ContainsFold predicate on the "rarity" field.
func RarityContainsFold(v string) predicate.Nft {
	return predicate.Nft(sql.FieldContainsFold(FieldRarity, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Nft {
	return predicate.Nft(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Nft {
	return predicate.Nft(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Nft) predicate.Nft {
	return predicate.Nft(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Nft) predicate.Nft {
	return predicate.Nft(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nft) predicate.Nft {
	return predicate.Nft(sql.NotPredicates(p))
}
