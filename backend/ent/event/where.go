// Code generated by ent, DO NOT EDIT.

package event

import (
	"backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldID, id))
}

// EventId applies equality check predicate on the "eventId" field. It's identical to EventIdEQ.
func EventId(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventId, v))
}

// BrandAddress applies equality check predicate on the "brandAddress" field. It's identical to BrandAddressEQ.
func BrandAddress(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldBrandAddress, v))
}

// EventIdEQ applies the EQ predicate on the "eventId" field.
func EventIdEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldEventId, v))
}

// EventIdNEQ applies the NEQ predicate on the "eventId" field.
func EventIdNEQ(v int) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldEventId, v))
}

// EventIdIn applies the In predicate on the "eventId" field.
func EventIdIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldEventId, vs...))
}

// EventIdNotIn applies the NotIn predicate on the "eventId" field.
func EventIdNotIn(vs ...int) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldEventId, vs...))
}

// EventIdGT applies the GT predicate on the "eventId" field.
func EventIdGT(v int) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldEventId, v))
}

// EventIdGTE applies the GTE predicate on the "eventId" field.
func EventIdGTE(v int) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldEventId, v))
}

// EventIdLT applies the LT predicate on the "eventId" field.
func EventIdLT(v int) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldEventId, v))
}

// EventIdLTE applies the LTE predicate on the "eventId" field.
func EventIdLTE(v int) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldEventId, v))
}

// BrandAddressEQ applies the EQ predicate on the "brandAddress" field.
func BrandAddressEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldEQ(FieldBrandAddress, v))
}

// BrandAddressNEQ applies the NEQ predicate on the "brandAddress" field.
func BrandAddressNEQ(v string) predicate.Event {
	return predicate.Event(sql.FieldNEQ(FieldBrandAddress, v))
}

// BrandAddressIn applies the In predicate on the "brandAddress" field.
func BrandAddressIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldIn(FieldBrandAddress, vs...))
}

// BrandAddressNotIn applies the NotIn predicate on the "brandAddress" field.
func BrandAddressNotIn(vs ...string) predicate.Event {
	return predicate.Event(sql.FieldNotIn(FieldBrandAddress, vs...))
}

// BrandAddressGT applies the GT predicate on the "brandAddress" field.
func BrandAddressGT(v string) predicate.Event {
	return predicate.Event(sql.FieldGT(FieldBrandAddress, v))
}

// BrandAddressGTE applies the GTE predicate on the "brandAddress" field.
func BrandAddressGTE(v string) predicate.Event {
	return predicate.Event(sql.FieldGTE(FieldBrandAddress, v))
}

// BrandAddressLT applies the LT predicate on the "brandAddress" field.
func BrandAddressLT(v string) predicate.Event {
	return predicate.Event(sql.FieldLT(FieldBrandAddress, v))
}

// BrandAddressLTE applies the LTE predicate on the "brandAddress" field.
func BrandAddressLTE(v string) predicate.Event {
	return predicate.Event(sql.FieldLTE(FieldBrandAddress, v))
}

// BrandAddressContains applies the Contains predicate on the "brandAddress" field.
func BrandAddressContains(v string) predicate.Event {
	return predicate.Event(sql.FieldContains(FieldBrandAddress, v))
}

// BrandAddressHasPrefix applies the HasPrefix predicate on the "brandAddress" field.
func BrandAddressHasPrefix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasPrefix(FieldBrandAddress, v))
}

// BrandAddressHasSuffix applies the HasSuffix predicate on the "brandAddress" field.
func BrandAddressHasSuffix(v string) predicate.Event {
	return predicate.Event(sql.FieldHasSuffix(FieldBrandAddress, v))
}

// BrandAddressEqualFold applies the EqualFold predicate on the "brandAddress" field.
func BrandAddressEqualFold(v string) predicate.Event {
	return predicate.Event(sql.FieldEqualFold(FieldBrandAddress, v))
}

// BrandAddressContainsFold applies the ContainsFold predicate on the "brandAddress" field.
func BrandAddressContainsFold(v string) predicate.Event {
	return predicate.Event(sql.FieldContainsFold(FieldBrandAddress, v))
}

// HasEventID applies the HasEdge predicate on the "event_id" edge.
func HasEventID() predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EventIDTable, EventIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventIDWith applies the HasEdge predicate on the "event_id" edge with a given conditions (other predicates).
func HasEventIDWith(preds ...predicate.EventParticipant) predicate.Event {
	return predicate.Event(func(s *sql.Selector) {
		step := newEventIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Event) predicate.Event {
	return predicate.Event(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Event) predicate.Event {
	return predicate.Event(sql.NotPredicates(p))
}
