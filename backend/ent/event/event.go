// Code generated by ent, DO NOT EDIT.

package event

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventId holds the string denoting the eventid field in the database.
	FieldEventId = "event_id"
	// FieldBrandAddress holds the string denoting the brandaddress field in the database.
	FieldBrandAddress = "brand_address"
	// Table holds the table name of the event in the database.
	Table = "events"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldEventId,
	FieldBrandAddress,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEventId holds the default value on creation for the "eventId" field.
	DefaultEventId string
	// DefaultBrandAddress holds the default value on creation for the "brandAddress" field.
	DefaultBrandAddress string
)

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventId orders the results by the eventId field.
func ByEventId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventId, opts...).ToFunc()
}

// ByBrandAddress orders the results by the brandAddress field.
func ByBrandAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandAddress, opts...).ToFunc()
}
