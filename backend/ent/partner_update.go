// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend/ent/event"
	"backend/ent/partner"
	"backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PartnerUpdate is the builder for updating Partner entities.
type PartnerUpdate struct {
	config
	hooks    []Hook
	mutation *PartnerMutation
}

// Where appends a list predicates to the PartnerUpdate builder.
func (_u *PartnerUpdate) Where(ps ...predicate.Partner) *PartnerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAddress sets the "address" field.
func (_u *PartnerUpdate) SetAddress(v string) *PartnerUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableAddress(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *PartnerUpdate) SetName(v string) *PartnerUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableName(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PartnerUpdate) SetDescription(v string) *PartnerUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableDescription(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *PartnerUpdate) SetEmail(v string) *PartnerUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableEmail(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetImage sets the "image" field.
func (_u *PartnerUpdate) SetImage(v string) *PartnerUpdate {
	_u.mutation.SetImage(v)
	return _u
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (_u *PartnerUpdate) SetNillableImage(v *string) *PartnerUpdate {
	if v != nil {
		_u.SetImage(*v)
	}
	return _u
}

// AddPartnerAddresIDs adds the "partner_address" edge to the Event entity by IDs.
func (_u *PartnerUpdate) AddPartnerAddresIDs(ids ...int) *PartnerUpdate {
	_u.mutation.AddPartnerAddresIDs(ids...)
	return _u
}

// AddPartnerAddress adds the "partner_address" edges to the Event entity.
func (_u *PartnerUpdate) AddPartnerAddress(v ...*Event) *PartnerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnerAddresIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (_u *PartnerUpdate) Mutation() *PartnerMutation {
	return _u.mutation
}

// ClearPartnerAddress clears all "partner_address" edges to the Event entity.
func (_u *PartnerUpdate) ClearPartnerAddress() *PartnerUpdate {
	_u.mutation.ClearPartnerAddress()
	return _u
}

// RemovePartnerAddresIDs removes the "partner_address" edge to Event entities by IDs.
func (_u *PartnerUpdate) RemovePartnerAddresIDs(ids ...int) *PartnerUpdate {
	_u.mutation.RemovePartnerAddresIDs(ids...)
	return _u
}

// RemovePartnerAddress removes "partner_address" edges to Event entities.
func (_u *PartnerUpdate) RemovePartnerAddress(v ...*Event) *PartnerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnerAddresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PartnerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PartnerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *PartnerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(partner.FieldAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(partner.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(partner.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Image(); ok {
		_spec.SetField(partner.FieldImage, field.TypeString, value)
	}
	if _u.mutation.PartnerAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.PartnerAddressTable,
			Columns: []string{partner.PartnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnerAddressIDs(); len(nodes) > 0 && !_u.mutation.PartnerAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.PartnerAddressTable,
			Columns: []string{partner.PartnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnerAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.PartnerAddressTable,
			Columns: []string{partner.PartnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PartnerUpdateOne is the builder for updating a single Partner entity.
type PartnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnerMutation
}

// SetAddress sets the "address" field.
func (_u *PartnerUpdateOne) SetAddress(v string) *PartnerUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableAddress(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *PartnerUpdateOne) SetName(v string) *PartnerUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableName(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PartnerUpdateOne) SetDescription(v string) *PartnerUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableDescription(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *PartnerUpdateOne) SetEmail(v string) *PartnerUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableEmail(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetImage sets the "image" field.
func (_u *PartnerUpdateOne) SetImage(v string) *PartnerUpdateOne {
	_u.mutation.SetImage(v)
	return _u
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (_u *PartnerUpdateOne) SetNillableImage(v *string) *PartnerUpdateOne {
	if v != nil {
		_u.SetImage(*v)
	}
	return _u
}

// AddPartnerAddresIDs adds the "partner_address" edge to the Event entity by IDs.
func (_u *PartnerUpdateOne) AddPartnerAddresIDs(ids ...int) *PartnerUpdateOne {
	_u.mutation.AddPartnerAddresIDs(ids...)
	return _u
}

// AddPartnerAddress adds the "partner_address" edges to the Event entity.
func (_u *PartnerUpdateOne) AddPartnerAddress(v ...*Event) *PartnerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPartnerAddresIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (_u *PartnerUpdateOne) Mutation() *PartnerMutation {
	return _u.mutation
}

// ClearPartnerAddress clears all "partner_address" edges to the Event entity.
func (_u *PartnerUpdateOne) ClearPartnerAddress() *PartnerUpdateOne {
	_u.mutation.ClearPartnerAddress()
	return _u
}

// RemovePartnerAddresIDs removes the "partner_address" edge to Event entities by IDs.
func (_u *PartnerUpdateOne) RemovePartnerAddresIDs(ids ...int) *PartnerUpdateOne {
	_u.mutation.RemovePartnerAddresIDs(ids...)
	return _u
}

// RemovePartnerAddress removes "partner_address" edges to Event entities.
func (_u *PartnerUpdateOne) RemovePartnerAddress(v ...*Event) *PartnerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePartnerAddresIDs(ids...)
}

// Where appends a list predicates to the PartnerUpdate builder.
func (_u *PartnerUpdateOne) Where(ps ...predicate.Partner) *PartnerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PartnerUpdateOne) Select(field string, fields ...string) *PartnerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Partner entity.
func (_u *PartnerUpdateOne) Save(ctx context.Context) (*Partner, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PartnerUpdateOne) SaveX(ctx context.Context) *Partner {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PartnerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PartnerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *PartnerUpdateOne) sqlSave(ctx context.Context) (_node *Partner, err error) {
	_spec := sqlgraph.NewUpdateSpec(partner.Table, partner.Columns, sqlgraph.NewFieldSpec(partner.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Partner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partner.FieldID)
		for _, f := range fields {
			if !partner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(partner.FieldAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(partner.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(partner.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(partner.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Image(); ok {
		_spec.SetField(partner.FieldImage, field.TypeString, value)
	}
	if _u.mutation.PartnerAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.PartnerAddressTable,
			Columns: []string{partner.PartnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPartnerAddressIDs(); len(nodes) > 0 && !_u.mutation.PartnerAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.PartnerAddressTable,
			Columns: []string{partner.PartnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PartnerAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   partner.PartnerAddressTable,
			Columns: []string{partner.PartnerAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Partner{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
