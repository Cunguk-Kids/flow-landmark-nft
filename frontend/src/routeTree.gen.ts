/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PitchRouteImport } from './routes/pitch'
import { Route as LandingRouteImport } from './routes/landing'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TicketsIndexRouteImport } from './routes/tickets/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminFormIndexRouteImport } from './routes/admin/form/index'
import { Route as PartnersDetailsAddressRouteImport } from './routes/partners/details.$address'
import { Route as EventsFormEventIdRouteImport } from './routes/events/form.$eventId'
import { Route as EventsDetailsEventIdRouteImport } from './routes/events/details.$eventId'
import { Route as AdminFormEventIdRouteImport } from './routes/admin/form/$eventId'

const PitchRoute = PitchRouteImport.update({
  id: '/pitch',
  path: '/pitch',
  getParentRoute: () => rootRouteImport,
} as any)
const LandingRoute = LandingRouteImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TicketsIndexRoute = TicketsIndexRouteImport.update({
  id: '/tickets/',
  path: '/tickets/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminFormIndexRoute = AdminFormIndexRouteImport.update({
  id: '/admin/form/',
  path: '/admin/form/',
  getParentRoute: () => rootRouteImport,
} as any)
const PartnersDetailsAddressRoute = PartnersDetailsAddressRouteImport.update({
  id: '/partners/details/$address',
  path: '/partners/details/$address',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsFormEventIdRoute = EventsFormEventIdRouteImport.update({
  id: '/events/form/$eventId',
  path: '/events/form/$eventId',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsDetailsEventIdRoute = EventsDetailsEventIdRouteImport.update({
  id: '/events/details/$eventId',
  path: '/events/details/$eventId',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminFormEventIdRoute = AdminFormEventIdRouteImport.update({
  id: '/admin/form/$eventId',
  path: '/admin/form/$eventId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/landing': typeof LandingRoute
  '/pitch': typeof PitchRoute
  '/admin': typeof AdminIndexRoute
  '/tickets': typeof TicketsIndexRoute
  '/admin/form/$eventId': typeof AdminFormEventIdRoute
  '/events/details/$eventId': typeof EventsDetailsEventIdRoute
  '/events/form/$eventId': typeof EventsFormEventIdRoute
  '/partners/details/$address': typeof PartnersDetailsAddressRoute
  '/admin/form': typeof AdminFormIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/landing': typeof LandingRoute
  '/pitch': typeof PitchRoute
  '/admin': typeof AdminIndexRoute
  '/tickets': typeof TicketsIndexRoute
  '/admin/form/$eventId': typeof AdminFormEventIdRoute
  '/events/details/$eventId': typeof EventsDetailsEventIdRoute
  '/events/form/$eventId': typeof EventsFormEventIdRoute
  '/partners/details/$address': typeof PartnersDetailsAddressRoute
  '/admin/form': typeof AdminFormIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/landing': typeof LandingRoute
  '/pitch': typeof PitchRoute
  '/admin/': typeof AdminIndexRoute
  '/tickets/': typeof TicketsIndexRoute
  '/admin/form/$eventId': typeof AdminFormEventIdRoute
  '/events/details/$eventId': typeof EventsDetailsEventIdRoute
  '/events/form/$eventId': typeof EventsFormEventIdRoute
  '/partners/details/$address': typeof PartnersDetailsAddressRoute
  '/admin/form/': typeof AdminFormIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/landing'
    | '/pitch'
    | '/admin'
    | '/tickets'
    | '/admin/form/$eventId'
    | '/events/details/$eventId'
    | '/events/form/$eventId'
    | '/partners/details/$address'
    | '/admin/form'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/landing'
    | '/pitch'
    | '/admin'
    | '/tickets'
    | '/admin/form/$eventId'
    | '/events/details/$eventId'
    | '/events/form/$eventId'
    | '/partners/details/$address'
    | '/admin/form'
  id:
    | '__root__'
    | '/'
    | '/landing'
    | '/pitch'
    | '/admin/'
    | '/tickets/'
    | '/admin/form/$eventId'
    | '/events/details/$eventId'
    | '/events/form/$eventId'
    | '/partners/details/$address'
    | '/admin/form/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LandingRoute: typeof LandingRoute
  PitchRoute: typeof PitchRoute
  AdminIndexRoute: typeof AdminIndexRoute
  TicketsIndexRoute: typeof TicketsIndexRoute
  AdminFormEventIdRoute: typeof AdminFormEventIdRoute
  EventsDetailsEventIdRoute: typeof EventsDetailsEventIdRoute
  EventsFormEventIdRoute: typeof EventsFormEventIdRoute
  PartnersDetailsAddressRoute: typeof PartnersDetailsAddressRoute
  AdminFormIndexRoute: typeof AdminFormIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pitch': {
      id: '/pitch'
      path: '/pitch'
      fullPath: '/pitch'
      preLoaderRoute: typeof PitchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tickets/': {
      id: '/tickets/'
      path: '/tickets'
      fullPath: '/tickets'
      preLoaderRoute: typeof TicketsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/form/': {
      id: '/admin/form/'
      path: '/admin/form'
      fullPath: '/admin/form'
      preLoaderRoute: typeof AdminFormIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/partners/details/$address': {
      id: '/partners/details/$address'
      path: '/partners/details/$address'
      fullPath: '/partners/details/$address'
      preLoaderRoute: typeof PartnersDetailsAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/form/$eventId': {
      id: '/events/form/$eventId'
      path: '/events/form/$eventId'
      fullPath: '/events/form/$eventId'
      preLoaderRoute: typeof EventsFormEventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/details/$eventId': {
      id: '/events/details/$eventId'
      path: '/events/details/$eventId'
      fullPath: '/events/details/$eventId'
      preLoaderRoute: typeof EventsDetailsEventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/form/$eventId': {
      id: '/admin/form/$eventId'
      path: '/admin/form/$eventId'
      fullPath: '/admin/form/$eventId'
      preLoaderRoute: typeof AdminFormEventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LandingRoute: LandingRoute,
  PitchRoute: PitchRoute,
  AdminIndexRoute: AdminIndexRoute,
  TicketsIndexRoute: TicketsIndexRoute,
  AdminFormEventIdRoute: AdminFormEventIdRoute,
  EventsDetailsEventIdRoute: EventsDetailsEventIdRoute,
  EventsFormEventIdRoute: EventsFormEventIdRoute,
  PartnersDetailsAddressRoute: PartnersDetailsAddressRoute,
  AdminFormIndexRoute: AdminFormIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
