import { GoogleGenAI, PersonGeneration } from "@google/genai";

// --- Interfaces & constants ---
export interface CardData {
  brand: string;
  description: string;
}

const POKER_CARD_WIDTH = 630;
const POKER_CARD_HEIGHT = 880;
const API_KEY: string = import.meta.env.VITE_GEMINI_API_KEY;

/**
 * Generate poker card design using Imagen 4.0 (AI image model)
 * Returns base64-encoded image as data URL.
 */
export async function generateImageCard(data: CardData): Promise<string> {
  const { brand, description } = data;

  // Init Google Imagen API
  const ai = new GoogleGenAI({
    apiKey: API_KEY,
  });

  // === Prompt ===
  const prompt = `
  Desain kartu poker eksklusif bertema merek "${brand}".
  Gaya ilustrasi elegan, modern, detail artistik.
  Menampilkan elemen yang menggambarkan "${description}".
  Komposisi proporsional dan realistis.
  Ukuran: ${POKER_CARD_WIDTH}x${POKER_CARD_HEIGHT}px.
  Format hasil: high-quality JPEG.
  `;

  console.log("üñåÔ∏è Prompt yang dikirim:", prompt);

  try {
    // === Generate image ===
    const response = await ai.models.generateImages({
      model: "models/imagen-4.0-generate-001", // model Imagen terbaru
      prompt,
      config: {
        numberOfImages: 1,
        aspectRatio: "1:1",
        outputMimeType: "image/jpeg",
        personGeneration: PersonGeneration.ALLOW_ALL,
      },
    });

    if (!response?.generatedImages?.length) {
      throw new Error("No image generated by AI");
    }

    const imageBytes = response.generatedImages[0]?.image?.imageBytes;

    if (!imageBytes) {
      throw new Error("Missing image data");
    }

    // Convert base64 bytes to browser data URL
    const imageUrl = `data:image/jpeg;base64,${imageBytes}`;
    console.log("‚úÖ Image successfully generated!");

    return imageUrl;
  } catch (err) {
    console.error("‚ùå Failed to generate image:", err);
    throw err;
  }
}
